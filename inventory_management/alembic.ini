# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep. If this
# key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # Use os.pathsep. Default configuration used for new projects.

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = sqlite:///data/inventory.db

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using ``ruff check --fix``
# hooks = ruff
# ruff.type = console_scripts
# ruff.entrypoint = ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# lint with attempts to fix using ``ruff format``
# hooks = ruff-format
# ruff-format.type = console_scripts
# ruff-format.entrypoint = ruff
# ruff-format.options = format REVISION_SCRIPT_FILENAME
# ruff-format.tee_stdout = true

# lint with attempts to fix using ``ruff check --fix --unsafe-fixes``
# hooks = ruff-unsafe
# ruff-unsafe.type = console_scripts
# ruff-unsafe.entrypoint = ruff
# ruff-unsafe.options = check --fix --unsafe-fixes REVISION_SCRIPT_FILENAME

# lint with attempts to fix using ``ruff check --fix --unsafe-fixes --show-fixes``
# hooks = ruff-show-fixes
# ruff-show-fixes.type = console_scripts
# ruff-show-fixes.entrypoint = ruff
# ruff-show-fixes.options = check --fix --unsafe-fixes --show-fixes REVISION_SCRIPT_FILENAME

# Format with ``black`` then lint with ``flake8``.
# When using this, ensure you exclude the output of black from the flake8
# lint, and that your flake8 excludes any other post write hooks that
# run after this one.  The format of the string includes a format parameter
# that is replaced with the filename of the new migration file.
# hooks = blacken-docs-fix,flake8-fix
#
# blacken-docs-fix.type = console_scripts
# blacken-docs-fix.entrypoint = black
# blacken-docs-fix.options = --target-version py37 --skip-string-normalization --quiet %(file)s
#
# flake8-fix.type = console_scripts
# flake8-fix.entrypoint = flake8
# flake8-fix.options = --max-line-length=100 --extend-ignore=W503,E203 %(file)s
#
# # You can also use a fully qualified module name for the hook function.
# # This form is most useful for user-defined hooks.
# hooks = mypackage.mymodule:myhook
#
# # You can define the function in the hooks themselves,
# # but note the function needs to be in the Python path.
# # This is a simple example.
# hooks = autopep8_hook
# autopep8_hook.type = python
# autopep8_hook.entrypoint = autopep8:main
# autopep8_hook.tee_stdout = true
# autopep8_hook.options = -i -j0 -a -a --max-line-length=100 REVISION_SCRIPT_FILENAME
# autopep8_hook.cwd = %(here)s
#
# # You can also define the function in the hooks themselves.
# # This is a simple example.
# hooks = myhook
# myhook.type = python
# myhook.entrypoint = mypackage.mymodule:myhook
# myhook.options = --option1 --option2
# myhook.cwd = %(here)s
#
# # You can also define the function in the hooks themselves.
# # This is a simple example.
# hooks = myhook
# myhook.type = exec
# myhook.executable = /path/to/my/script.sh
# myhook.options = --option1 --option2
# myhook.cwd = %(here)s
# myhook.env.PYTHONPATH = %(here)s
# myhook.env.PYTHONIOENCODING = utf-8
# myhook.env.SOME_VAR = some_value

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
